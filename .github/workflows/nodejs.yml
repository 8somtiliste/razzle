name: Node CI

on: [push]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        node-version: [10.x, 12.x, 13.x, 14.x]
        os: [ubuntu-latest, windows-latest, macOS-latest]
        webpack: [webpack@4.44.2, webpack@5.0.0-rc.3]

    name: Test on node ${{ matrix.node-version }} and ${{ matrix.os }} with ${{ matrix.webpack }}

    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install elm globally
      run: yarn global add elm

    - name: Set default run status
      id: last_run_status
      run: echo ::set-output name=last_run_status::default > last_run_status

    - name: Set head sha
      id: head_sha
      run: echo ::set-output name=head_sha::$(git rev-parse HEAD)

    - name: Restore last run status
      id: last_run
      uses: actions/cache@v2
      with:
        path: |
          last_run_status
        key: ${{ steps.head_sha.outputs.head_sha }}-${{ matrix.os }}-${{ matrix.node-version }}-${{ matrix.webpack }}-${{ github.run_id }}
        restore-keys: |
          ${{ steps.head_sha.outputs.head_sha }}-${{ matrix.os }}-${{ matrix.node-version }}-${{ matrix.webpack }}-

    - name: Set last run status
      run: cat last_run_status

    - name: Restore lerna
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          node_modules
          */*/node_modules
        key: ${{ matrix.os }}-${{ matrix.node-version }}-${{ matrix.webpack }}-${{ hashFiles('**/yarn.lock') }}

    - name: Install and bootstrap packages
      if: steps.cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile --ignore-engines --network-timeout 1000000

    - name: Install ${{ matrix.webpack }}
      if: steps.cache.outputs.cache-hit != 'true'
      run: yarn add -W ${{ matrix.webpack }} --ignore-engines --network-timeout 1000000

    - name: Run tests
      id: test_run
      run: yarn test --runInBand --coverage
      env:
        CI: true
        WARNINGS_ERRORS_DISABLE: true

    - name: Save run status
      run: echo ::set-output name=last_run_status::${{ steps.test_run.outcome }} > last_run_status
